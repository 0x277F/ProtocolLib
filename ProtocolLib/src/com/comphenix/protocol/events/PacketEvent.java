package com.comphenix.protocol.events;

import java.util.EventObject;

import org.bukkit.entity.Player;

public class PacketEvent extends EventObject {
	/**
	 * Automatically generated by Eclipse.
	 */
	private static final long serialVersionUID = -5360289379097430620L;

	private PacketContainer packet;
	private Player player;
	private boolean serverPacket;
	private boolean cancel;
	
	/**
	 * Use the static constructors to create instances of this event.
	 * @param source - the event source.
	 */
	public PacketEvent(Object source) {
		super(source);
	}

	private PacketEvent(Object source, PacketContainer packet, Player player, boolean serverPacket) {
		super(source);
		this.packet = packet;
		this.player = player;
		this.serverPacket = serverPacket;
	}

	/**
	 * Creates an event representing a client packet transmission.
	 * @param source - the event source.
	 * @param packet - the packet.
	 * @param client - the client that sent the packet.
	 * @return The event.
	 */
	public static PacketEvent fromClient(Object source, PacketContainer packet, Player client) {
		return new PacketEvent(source, packet, client, false);
	}
	
	/**
	 * Creates an event representing a server packet transmission.
	 * @param source - the event source.
	 * @param packet - the packet.
	 * @param recipient - the client that will receieve the packet.
	 * @return The event.
	 */
	public static PacketEvent fromServer(Object source,  PacketContainer packet, Player recipient) {
		return new PacketEvent(source, packet, recipient, true);
	}
	
	/**
	 * Retrieves the packet that will be sent to the player.
	 * @return Packet to send to the player.
	 */
	public PacketContainer getPacket() {
		return packet;
	}

	/**
	 * Replace the packet that will be sent to the player.
	 * @param packet - the packet that will be sent instead.
	 */
	public void setPacket(PacketContainer packet) {
		this.packet = packet;
	}

	/**
	 * Retrieves the packet ID.
	 * @return The current packet ID.
	 */
	public int getPacketID() {
		return packet.getID();
	}
	
	/**
	 * Retrieves whether or not the packet should be cancelled.
	 * @return TRUE if it should be cancelled, FALSE otherwise.
	 */
	public boolean isCancelled() {
		return cancel;
	}

	/**
	 * Sets whether or not the packet should be cancelled.
	 * @param cancel - TRUE if it should be cancelled, FALSE otherwise.
	 */
	public void setCancelled(boolean cancel) {
		this.cancel = cancel;
	}

	/**
	 * Retrieves the player that has sent the packet or is recieving it.
	 * @return The player associated with this event.
	 */
	public Player getPlayer() {
		return player;
	}
	
	/**
	 * Whether or not this packet was created by the server.
	 * @return TRUE if the packet was created by the server, FALSE if it was created by a client.
	 */
	public boolean isServerPacket() {
		return serverPacket;
	}
}
