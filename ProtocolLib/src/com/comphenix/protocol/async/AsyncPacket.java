package com.comphenix.protocol.async;

import java.io.Serializable;

import com.comphenix.protocol.events.PacketEvent;
import com.google.common.primitives.Longs;

/**
 * Represents a packet that is being processed by asynchronous listeners.
 * 
 * @author Kristian
 */
public class AsyncPacket implements Serializable, Comparable<AsyncPacket> {
	
	/**
	 * Generated by Eclipse.
	 */
	private static final long serialVersionUID = -2621498096616187384L;

	/**
	 * Default number of milliseconds until a packet will rejected.
	 */
	public static final int DEFAULT_TIMEOUT_DETLA = 60000;
	
	/**
	 * The original synchronized packet.
	 */
	private PacketEvent packetEvent;
	
	// Timeout handling
	private long initialTime;
	private long timeout;
	
	// Packet order
	private long originalSendingIndex;
	private long newSendingIndex;
	
	
	/**
	 * Create a container for asyncronous packets.
	 * @param packetEvent - the synchronous packet event.
	 * @param initialTime - the current time in milliseconds since 01.01.1970 00:00.
	 */
	public AsyncPacket(PacketEvent packetEvent, long sendingIndex, long initialTime) {
		this.packetEvent = packetEvent;
		
		// Timeout
		this.initialTime = initialTime;
		this.timeout = initialTime + DEFAULT_TIMEOUT_DETLA;
		
		// Sending index
		this.originalSendingIndex = sendingIndex;
		this.newSendingIndex = sendingIndex;
	}
	
	/**
	 * Retrieve the time the packet was initially queued for asynchronous processing.
	 * @return The initial time in number of milliseconds since 01.01.1970 00:00. 
	 */
	public long getInitialTime() {
		return initialTime;
	}	

	/**
	 * Retrieve the time the packet will be forcefully rejected.
	 * @return The time to reject the packet, in milliseconds since 01.01.1970 00:00.
	 */
	public long getTimeout() {
		return timeout;
	}
	
	/**
	 * Sets the time the packet will be forcefully rejected.
	 * @param timeout - the time to reject the packet, in milliseconds since 01.01.1970 00:00.
	 */
	public void setTimeout(long timeout) {
		this.timeout = timeout;
	}

	/**
	 * Retrieve the order the packet was originally transmitted.
	 * @return The original packet index.
	 */
	public long getOriginalSendingIndex() {
		return originalSendingIndex;
	}

	/**
	 * Retrieve the desired sending order after processing has completed.
	 * <p>
	 * Higher sending order means lower priority.
	 * @return Desired sending order.
	 */
	public long getNewSendingIndex() {
		return newSendingIndex;
	}

	/**
	 * Sets the desired sending order after processing has completed.
	 * <p>
	 * Higher sending order means lower priority.
	 * @param newSendingIndex - new packet send index.
	 */
	public void setNewSendingIndex(long newSendingIndex) {
		this.newSendingIndex = newSendingIndex;
	}

	/**
	 * Retrieve the original synchronous packet event.
	 * @return The original packet event.
	 */
	public PacketEvent getPacketEvent() {
		return packetEvent;
	}

	@Override
	public int compareTo(AsyncPacket o) {
		if (o == null)
			return 1;
		else
			return Longs.compare(getNewSendingIndex(), o.getNewSendingIndex());
	}
}
